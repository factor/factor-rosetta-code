! The sequence is generated by following this pseudo-code:
! 
!     A:  The first term is zero.
!         Repeatedly apply:
!             If the last term is *new* to the sequence so far then:
!     B:          The next term is zero.
!             Otherwise:
!     C:          The next term is how far back this last term occured previously.
! 
! Example:
! 
! Using A:
! 
!     0
! 
! Using B:
! 
!     0 0
! 
! Using C:
! 
!     0 0 1
! 
! Using B:
! 
!     0 0 1 0
! 
! Using C: (zero last occurred two steps back - before the one)
! 
!     0 0 1 0 2
! 
! Using B:
! 
!     0 0 1 0 2 0
! 
! Using C: (two last occurred two steps back - before the zero)
! 
!     0 0 1 0 2 0 2 2
! 
! Using C: (two last occurred one step back)
! 
!     0 0 1 0 2 0 2 2 1
! 
! Using C: (one last appeared six steps back)
! 
!     0 0 1 0 2 0 2 2 1 6
! 
! ...
! 
! Task:
! 
! 1.  Create a function/procedure/method/subroutine/... to generate the
!     Van Eck sequence of numbers.
! 2.  Use it to display here, on this page:
! 
! :# The first ten terms of the sequence.
! 
! :# Terms 991 - to - 1000 of the sequence.
! 
! References:
! 
! -   Don't Know (the Van Eck Sequence) - Numberphile video.
! -   Wikipedia Article: Van Eck's Sequence.
! -    OEIS sequence: A181391.

USING: assocs fry kernel make math namespaces prettyprint
sequences ;

: van-eck ( n -- seq )
    [
        0 , 1 - H{ } clone '[
            building get [ length 1 - ] [ last ] bi _ 3dup
            2dup key? [ at - ] [ 3drop 0 ] if , set-at
        ] times
    ] { } make ;

1000 van-eck 10 [ head ] [ tail* ] 2bi [ . ] bi@
